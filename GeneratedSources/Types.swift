// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Operation performs `GET` on `/v1`
    func get_v1(_ input: Operations.get_v1.Input) async throws -> Operations.get_v1.Output
}
/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> URL {
        try URL(validatingOpenAPIServerURL: "https://ipgeolocation.abstractapi.com")
    }
}
/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/inline_response_200`.
        public struct inline_response_200: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/inline_response_200/city`.
            public var city: Swift.String?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/city_geoname_id`.
            public var city_geoname_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/connection`.
            public struct connectionPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/inline_response_200/connection/autonomous_system_number`.
                public var autonomous_system_number: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/connection/autonomous_system_organization`.
                public var autonomous_system_organization: Swift.String?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/connection/connection_type`.
                public var connection_type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/connection/isp_name`.
                public var isp_name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/connection/organization_name`.
                public var organization_name: Swift.String?
                /// Creates a new `connectionPayload`.
                ///
                /// - Parameters:
                ///   - autonomous_system_number:
                ///   - autonomous_system_organization:
                ///   - connection_type:
                ///   - isp_name:
                ///   - organization_name:
                public init(
                    autonomous_system_number: Swift.Int? = nil,
                    autonomous_system_organization: Swift.String? = nil,
                    connection_type: Swift.String? = nil,
                    isp_name: Swift.String? = nil,
                    organization_name: Swift.String? = nil
                ) {
                    self.autonomous_system_number = autonomous_system_number
                    self.autonomous_system_organization = autonomous_system_organization
                    self.connection_type = connection_type
                    self.isp_name = isp_name
                    self.organization_name = organization_name
                }
                public enum CodingKeys: String, CodingKey {
                    case autonomous_system_number
                    case autonomous_system_organization
                    case connection_type
                    case isp_name
                    case organization_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/inline_response_200/connection`.
            public var connection: Components.Schemas.inline_response_200.connectionPayload?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/continent`.
            public var continent: Swift.String?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/continent_code`.
            public var continent_code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/continent_geoname_id`.
            public var continent_geoname_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/country`.
            public var country: Swift.String?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/country_code`.
            public var country_code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/country_geoname_id`.
            public var country_geoname_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/country_is_eu`.
            public var country_is_eu: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/currency`.
            public struct currencyPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/inline_response_200/currency/currency_code`.
                public var currency_code: Swift.String?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/currency/currency_name`.
                public var currency_name: Swift.String?
                /// Creates a new `currencyPayload`.
                ///
                /// - Parameters:
                ///   - currency_code:
                ///   - currency_name:
                public init(currency_code: Swift.String? = nil, currency_name: Swift.String? = nil)
                {
                    self.currency_code = currency_code
                    self.currency_name = currency_name
                }
                public enum CodingKeys: String, CodingKey {
                    case currency_code
                    case currency_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/inline_response_200/currency`.
            public var currency: Components.Schemas.inline_response_200.currencyPayload?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/flag`.
            public struct flagPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/inline_response_200/flag/emoji`.
                public var emoji: Swift.String?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/flag/png`.
                public var png: Swift.String?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/flag/svg`.
                public var svg: Swift.String?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/flag/unicode`.
                public var unicode: Swift.String?
                /// Creates a new `flagPayload`.
                ///
                /// - Parameters:
                ///   - emoji:
                ///   - png:
                ///   - svg:
                ///   - unicode:
                public init(
                    emoji: Swift.String? = nil,
                    png: Swift.String? = nil,
                    svg: Swift.String? = nil,
                    unicode: Swift.String? = nil
                ) {
                    self.emoji = emoji
                    self.png = png
                    self.svg = svg
                    self.unicode = unicode
                }
                public enum CodingKeys: String, CodingKey {
                    case emoji
                    case png
                    case svg
                    case unicode
                }
            }
            /// - Remark: Generated from `#/components/schemas/inline_response_200/flag`.
            public var flag: Components.Schemas.inline_response_200.flagPayload?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/ip_address`.
            public var ip_address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/latitude`.
            public var latitude: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/longitude`.
            public var longitude: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/postal_code`.
            public var postal_code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/region`.
            public var region: Swift.String?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/region_geoname_id`.
            public var region_geoname_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/region_iso_code`.
            public var region_iso_code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/security`.
            public struct securityPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/inline_response_200/security/is_vpn`.
                public var is_vpn: Swift.Bool?
                /// Creates a new `securityPayload`.
                ///
                /// - Parameters:
                ///   - is_vpn:
                public init(is_vpn: Swift.Bool? = nil) { self.is_vpn = is_vpn }
                public enum CodingKeys: String, CodingKey { case is_vpn }
            }
            /// - Remark: Generated from `#/components/schemas/inline_response_200/security`.
            public var security: Components.Schemas.inline_response_200.securityPayload?
            /// - Remark: Generated from `#/components/schemas/inline_response_200/timezone`.
            public struct timezonePayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/inline_response_200/timezone/abbreviation`.
                public var abbreviation: Swift.String?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/timezone/current_time`.
                public var current_time: Swift.String?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/timezone/gmt_offset`.
                public var gmt_offset: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/timezone/is_dst`.
                public var is_dst: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/inline_response_200/timezone/name`.
                public var name: Swift.String?
                /// Creates a new `timezonePayload`.
                ///
                /// - Parameters:
                ///   - abbreviation:
                ///   - current_time:
                ///   - gmt_offset:
                ///   - is_dst:
                ///   - name:
                public init(
                    abbreviation: Swift.String? = nil,
                    current_time: Swift.String? = nil,
                    gmt_offset: Swift.Int? = nil,
                    is_dst: Swift.Bool? = nil,
                    name: Swift.String? = nil
                ) {
                    self.abbreviation = abbreviation
                    self.current_time = current_time
                    self.gmt_offset = gmt_offset
                    self.is_dst = is_dst
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case abbreviation
                    case current_time
                    case gmt_offset
                    case is_dst
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/inline_response_200/timezone`.
            public var timezone: Components.Schemas.inline_response_200.timezonePayload?
            /// Creates a new `inline_response_200`.
            ///
            /// - Parameters:
            ///   - city:
            ///   - city_geoname_id:
            ///   - connection:
            ///   - continent:
            ///   - continent_code:
            ///   - continent_geoname_id:
            ///   - country:
            ///   - country_code:
            ///   - country_geoname_id:
            ///   - country_is_eu:
            ///   - currency:
            ///   - flag:
            ///   - ip_address:
            ///   - latitude:
            ///   - longitude:
            ///   - postal_code:
            ///   - region:
            ///   - region_geoname_id:
            ///   - region_iso_code:
            ///   - security:
            ///   - timezone:
            public init(
                city: Swift.String? = nil,
                city_geoname_id: Swift.Int? = nil,
                connection: Components.Schemas.inline_response_200.connectionPayload? = nil,
                continent: Swift.String? = nil,
                continent_code: Swift.String? = nil,
                continent_geoname_id: Swift.Int? = nil,
                country: Swift.String? = nil,
                country_code: Swift.String? = nil,
                country_geoname_id: Swift.Int? = nil,
                country_is_eu: Swift.Bool? = nil,
                currency: Components.Schemas.inline_response_200.currencyPayload? = nil,
                flag: Components.Schemas.inline_response_200.flagPayload? = nil,
                ip_address: Swift.String? = nil,
                latitude: Swift.Double? = nil,
                longitude: Swift.Double? = nil,
                postal_code: Swift.String? = nil,
                region: Swift.String? = nil,
                region_geoname_id: Swift.Int? = nil,
                region_iso_code: Swift.String? = nil,
                security: Components.Schemas.inline_response_200.securityPayload? = nil,
                timezone: Components.Schemas.inline_response_200.timezonePayload? = nil
            ) {
                self.city = city
                self.city_geoname_id = city_geoname_id
                self.connection = connection
                self.continent = continent
                self.continent_code = continent_code
                self.continent_geoname_id = continent_geoname_id
                self.country = country
                self.country_code = country_code
                self.country_geoname_id = country_geoname_id
                self.country_is_eu = country_is_eu
                self.currency = currency
                self.flag = flag
                self.ip_address = ip_address
                self.latitude = latitude
                self.longitude = longitude
                self.postal_code = postal_code
                self.region = region
                self.region_geoname_id = region_geoname_id
                self.region_iso_code = region_iso_code
                self.security = security
                self.timezone = timezone
            }
            public enum CodingKeys: String, CodingKey {
                case city
                case city_geoname_id
                case connection
                case continent
                case continent_code
                case continent_geoname_id
                case country
                case country_code
                case country_geoname_id
                case country_is_eu
                case currency
                case flag
                case ip_address
                case latitude
                case longitude
                case postal_code
                case region
                case region_geoname_id
                case region_iso_code
                case security
                case timezone
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Operation performs `GET` on `/v1`
    public enum get_v1 {
        public static let id: String = "get/v1"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.get_v1.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var api_key: Swift.String
                public var ip_address: Swift.String?
                public var fields: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - api_key:
                ///   - ip_address:
                ///   - fields:
                public init(
                    api_key: Swift.String,
                    ip_address: Swift.String? = nil,
                    fields: Swift.String? = nil
                ) {
                    self.api_key = api_key
                    self.ip_address = ip_address
                    self.fields = fields
                }
            }
            public var query: Operations.get_v1.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.get_v1.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.get_v1.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.get_v1.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.get_v1.Input.Path = .init(),
                query: Operations.get_v1.Input.Query,
                headers: Operations.get_v1.Input.Headers = .init(),
                cookies: Operations.get_v1.Input.Cookies = .init(),
                body: Operations.get_v1.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.get_v1.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.inline_response_200)
                }
                /// Received HTTP response body
                public var body: Operations.get_v1.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_v1.Output.Ok.Headers = .init(),
                    body: Operations.get_v1.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Location of geolocated IP
            ///
            /// - Remark: Generated from `#/paths//v1/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_v1.Output.Ok)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
